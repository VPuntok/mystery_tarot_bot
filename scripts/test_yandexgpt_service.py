from django.core.management.base import BaseCommand
from tarot.services import yandex_gpt_service


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å YandexGPT —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ SDK'

    def handle(self, *args, **options):
        self.stdout.write("üîÆ –¢–µ—Å—Ç —Å–µ—Ä–≤–∏—Å–∞ YandexGPT")
        self.stdout.write("=" * 50)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        model_info = yandex_gpt_service.get_model_info()
        
        self.stdout.write(f"SDK –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úÖ' if model_info['sdk_available'] else '‚ùå'}")
        self.stdout.write(f"–ú–æ–¥–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {'‚úÖ' if model_info['model_initialized'] else '‚ùå'}")
        self.stdout.write(f"API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'‚úÖ' if model_info['api_key_configured'] else '‚ùå'}")
        self.stdout.write(f"Folder ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {'‚úÖ' if model_info['folder_id_configured'] else '‚ùå'}")
        
        if model_info['model_initialized']:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.stdout.write("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            connection_ok = yandex_gpt_service.test_connection()
            self.stdout.write(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {'‚úÖ' if connection_ok else '‚ùå'}")
            
            if connection_ok:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
                self.stdout.write("\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏...")
                
                test_cards = [
                    {
                        'name': '–®—É—Ç',
                        'meaning': '–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –ø—É—Ç–∏, –Ω–µ–≤–∏–Ω–Ω–æ—Å—Ç—å, —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å'
                    },
                    {
                        'name': '–ú–∞–≥',
                        'meaning': '–°–∏–ª–∞ –≤–æ–ª–∏, –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ, –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏'
                    },
                    {
                        'name': '–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞',
                        'meaning': '–ü–ª–æ–¥–æ—Ä–æ–¥–∏–µ, –∏–∑–æ–±–∏–ª–∏–µ, –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ'
                    }
                ]
                
                interpretation = yandex_gpt_service.generate_interpretation(
                    spread_name="–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞—Å–∫–ª–∞–¥",
                    cards=test_cards,
                    user_context="–•–æ—á—É —É–∑–Ω–∞—Ç—å –æ —Å–≤–æ–µ–º –±—É–¥—É—â–µ–º"
                )
                
                self.stdout.write("\nüìñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:")
                self.stdout.write("-" * 40)
                self.stdout.write(interpretation)
                self.stdout.write("-" * 40)
                self.stdout.write("üéâ –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            else:
                self.stdout.write("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ YandexGPT")
        else:
            self.stdout.write("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        self.stdout.write("\n" + "=" * 50) 