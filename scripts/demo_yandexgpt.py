#!/usr/bin/env python
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YandexGPT Lite
"""
import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
django.setup()

from tarot.services import yandex_gpt_service
from tarot.models import TarotSpread, TarotCard, Interpretation
from projects.models import Project
from users.models import UserProfile

def demo_yandexgpt():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å YandexGPT"""
    print("üîÆ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è YandexGPT Lite –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¢–∞—Ä–æ")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ YandexGPT...")
    if yandex_gpt_service.test_connection():
        print("‚úÖ YandexGPT –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("‚ö†Ô∏è YandexGPT –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–∞–ø–∞—Å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏")
    
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∫–∞—Ä—Ç—ã
    test_cards = [
        {'name': '–®—É—Ç', 'meaning': '–ù–æ–≤—ã–µ –Ω–∞—á–∏–Ω–∞–Ω–∏—è, —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å, —Å–≤–æ–±–æ–¥–∞'},
        {'name': '–ú–∞–≥', 'meaning': '–°–∏–ª–∞ –≤–æ–ª–∏, –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ, —Ä–µ—Å—É—Ä—Å—ã'},
        {'name': '–í–µ—Ä—Ö–æ–≤–Ω–∞—è –∂—Ä–∏—Ü–∞', 'meaning': '–ò–Ω—Ç—É–∏—Ü–∏—è, —Ç–∞–π–Ω—ã–µ –∑–Ω–∞–Ω–∏—è, –ø–æ–¥—Å–æ–∑–Ω–∞–Ω–∏–µ'},
        {'name': '–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞', 'meaning': '–ü–ª–æ–¥–æ—Ä–æ–¥–∏–µ, –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–æ, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ'},
        {'name': '–ò–º–ø–µ—Ä–∞—Ç–æ—Ä', 'meaning': '–í–ª–∞—Å—Ç—å, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç'}
    ]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
    interpretation = yandex_gpt_service.generate_interpretation(
        spread_name="–ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç",
        cards=test_cards,
        user_context="–í–æ–ø—Ä–æ—Å –æ –∫–∞—Ä—å–µ—Ä–Ω–æ–º —Ä–æ—Å—Ç–µ –∏ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö"
    )
    
    print("üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:")
    print("-" * 50)
    print(interpretation)
    print("-" * 50)
    
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
        project = Project.objects.first()
        if project:
            spread = TarotSpread.objects.filter(project=project).first()
            cards = TarotCard.objects.filter(deck__project=project)[:3]
            
            if spread and cards.exists():
                cards_data = []
                for card in cards:
                    cards_data.append({
                        'name': card.name,
                        'meaning': card.meaning_upright,
                        'reversed': False
                    })
                
                print(f"üìä –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å–∫–ª–∞–¥: {spread.name}")
                print(f"üìã –ö–∞—Ä—Ç—ã: {', '.join([card['name'] for card in cards_data])}")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
                db_interpretation = yandex_gpt_service.generate_interpretation(
                    spread_name=spread.name,
                    cards=cards_data,
                    user_context="–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
                )
                
                print("\nüìù –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∏–∑ –ë–î:")
                print("-" * 50)
                print(db_interpretation)
                print("-" * 50)
            else:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–∞—Å–∫–ª–∞–¥—ã –∏–ª–∏ –∫–∞—Ä—Ç—ã –≤ –ë–î")
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–æ–µ–∫—Ç—ã –≤ –ë–î")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {e}")
    
    print("\n4. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –≤ –ë–î...")
    
    try:
        user = UserProfile.objects.first()
        if user and spread and cards.exists():
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ –ë–î
            interpretation_obj = Interpretation.objects.create(
                user=user,
                spread=spread,
                ai_response=db_interpretation
            )
            interpretation_obj.cards.set(cards)
            
            print(f"‚úÖ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î —Å ID: {interpretation_obj.id}")
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
            print(f"üîÆ –†–∞—Å–∫–ª–∞–¥: {spread.name}")
            print(f"üìÖ –î–∞—Ç–∞: {interpretation_obj.created_at}")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ –ë–î")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {e}")
    
    print("\n" + "=" * 60)
    print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ YandexGPT:")
    print("1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –≤ Yandex Cloud Console")
    print("2. –î–æ–±–∞–≤—å—Ç–µ YANDEX_API_KEY –∏ YANDEX_FOLDER_ID –≤ .env")
    print("3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
    print("\nüìö –ü–æ–¥—Ä–æ–±–Ω–µ–µ: backend/YANDEXGPT_SETUP.md")

if __name__ == "__main__":
    demo_yandexgpt() 