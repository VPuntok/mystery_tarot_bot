import logging
from typing import Dict, Any
from django.utils import timezone
from datetime import timedelta

from projects.models import Project
from users.models import UserProfile
from tarot.models import TarotSpread, TarotCard, Interpretation
from payments.models import Package

logger = logging.getLogger(__name__)

class TelegramBotHandler:
    """–ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ Telegram Bot API"""
    
    def __init__(self, project: Project):
        self.project = project
        self.bot_token = project.telegram_token
        
    def handle_message(self, message_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message_type = message_data.get('type', 'text')
        
        if message_type == 'command':
            return self._handle_command(message_data)
        elif message_type == 'text':
            return self._handle_text(message_data)
        else:
            return self._create_response("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    def _handle_command(self, message_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        command = message_data.get('command', '')
        user_id = message_data.get('user_id')
        username = message_data.get('username', '')
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = UserProfile.objects.get_or_create(
            project=self.project,
            telegram_user_id=user_id,
            defaults={'username': username}
        )
        
        if command == '/start':
            return self._handle_start(user)
        elif command == '/help':
            return self._handle_help(user)
        elif command == '/tarot':
            return self._handle_tarot(user)
        elif command == '/balance':
            return self._handle_balance(user)
        elif command == '/packages':
            return self._handle_packages(user)
        else:
            return self._create_response("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
    
    def _handle_start(self, user: UserProfile) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = f"""
üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {self.project.name}!

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–∞—Ä—Ç –¢–∞—Ä–æ.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/tarot - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
/packages - –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
/help - –ü–æ–º–æ—â—å

–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} —Ä–∞—Å–∫–ª–∞–¥–æ–≤
        """
        return self._create_response(welcome_text.strip())
    
    def _handle_help(self, user: UserProfile) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = f"""
üîÆ {self.project.name} - –ü–æ–º–æ—â—å

–ö–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/tarot - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (—Å—Ç–æ–∏–º–æ—Å—Ç—å: 1 —Ä–∞—Å–∫–ª–∞–¥)
/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ä–∞—Å–∫–ª–∞–¥–æ–≤
/packages - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /tarot
        """
        return self._create_response(help_text.strip())
    
    def _handle_tarot(self, user: UserProfile) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /tarot"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if user.balance <= 0:
            return self._create_response(
                "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Ä–∞—Å–∫–ª–∞–¥—ã!\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /packages –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤."
            )
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥
        spreads = TarotSpread.objects.filter(project=self.project)
        if not spreads.exists():
            return self._create_response("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤.")
        
        spread = spreads.first()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞
        cards = TarotCard.objects.filter(deck__project=self.project).order_by('?')[:spread.num_cards]
        
        if len(cards) < spread.num_cards:
            return self._create_response("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞.")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
        interpretation = Interpretation.objects.create(
            user=user,
            spread=spread,
            ai_response="–≠—Ç–æ –ø—Ä–∏–º–µ—Ä AI-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–∞—Å–∫–ª–∞–¥–∞. –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç OpenAI."
        )
        interpretation.cards.set(cards)
        
        # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å
        user.balance -= 1
        user.save()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        cards_text = "\n".join([f"‚Ä¢ {card.name}" for card in cards])
        response_text = f"""
üîÆ –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:

–†–∞—Å–∫–ª–∞–¥: {spread.name}
–ö–∞—Ä—Ç—ã: {cards_text}

–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:
{interpretation.ai_response}

–û—Å—Ç–∞–ª–æ—Å—å —Ä–∞—Å–∫–ª–∞–¥–æ–≤: {user.balance}
        """
        return self._create_response(response_text.strip())
    
    def _handle_balance(self, user: UserProfile) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /balance"""
        balance_text = f"""
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:

–†–∞—Å–∫–ª–∞–¥–æ–≤: {user.balance}
        """
        
        if user.subscription_start and user.subscription_end:
            if timezone.now().date() <= user.subscription_end:
                balance_text += f"\n–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user.subscription_end.strftime('%d.%m.%Y')}"
            else:
                balance_text += "\n–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞"
        
        return self._create_response(balance_text.strip())
    
    def _handle_packages(self, user: UserProfile) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /packages"""
        packages = Package.objects.filter(project=self.project, is_active=True)
        
        if not packages.exists():
            return self._create_response("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤.")
        
        packages_text = "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:\n\n"
        
        for package in packages:
            if package.package_type == 'one_time':
                packages_text += f"‚Ä¢ {package.name} - {package.price}‚ÇΩ ({package.num_readings} —Ä–∞—Å–∫–ª–∞–¥–æ–≤)\n"
            else:
                packages_text += f"‚Ä¢ {package.name} - {package.price}‚ÇΩ ({package.subscription_days} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏)\n"
        
        packages_text += "\n–î–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        
        return self._create_response(packages_text.strip())
    
    def _handle_text(self, message_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return self._create_response("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º. /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
    
    def _create_response(self, text: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        return {
            'type': 'text',
            'text': text,
            'timestamp': timezone.now().isoformat(),
            'bot_token': self.bot_token
        }

class TelegramBotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –±–æ—Ç–∞–º–∏"""
    
    @staticmethod
    def get_bot_handler(project_id: int) -> TelegramBotHandler:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞"""
        try:
            project = Project.objects.get(id=project_id, status='active')
            return TelegramBotHandler(project)
        except Project.DoesNotExist:
            raise ValueError(f"–ü—Ä–æ–µ–∫—Ç {project_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
    
    @staticmethod
    def handle_webhook(project_id: int, message_data: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram"""
        handler = TelegramBotManager.get_bot_handler(project_id)
        return handler.handle_message(message_data)
    
    @staticmethod
    def get_active_bots() -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤"""
        return Project.objects.filter(status='active') 