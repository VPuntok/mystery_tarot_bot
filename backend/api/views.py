from rest_framework import viewsets, permissions, status
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.permissions import AllowAny
from rest_framework.views import APIView
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework.filters import SearchFilter, OrderingFilter
from django.utils import timezone

from .serializers import (
    ProjectSerializer, UserProfileSerializer, TarotDeckSerializer, TarotCardSerializer,
    TarotSpreadSerializer, InterpretationSerializer, PackageSerializer, 
    PaymentSerializer, PaymentCreateSerializer
)
from projects.models import Project
from users.models import UserProfile
from tarot.models import TarotDeck, TarotCard, TarotSpread, Interpretation
from payments.models import Package, Payment
from telegram_bot.handlers import TelegramBotManager

class HealthCheckView(APIView):
    """–ü—Ä–æ—Å—Ç–æ–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API"""
    permission_classes = [AllowAny]
    
    def get(self, request):
        return Response({
            'status': 'ok',
            'message': 'API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
            'timestamp': timezone.now().isoformat()
        })

class ProjectViewSet(viewsets.ModelViewSet):
    queryset = Project.objects.all()
    serializer_class = ProjectSerializer
    permission_classes = [AllowAny]  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]
    filterset_fields = ['status']
    search_fields = ['name']
    ordering_fields = ['created_at', 'name']

    @action(detail=True, methods=['post'])
    def send_message(self, request, pk=None):
        """–ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É"""
        project = self.get_object()
        
        try:
            handler = TelegramBotManager.get_bot_handler(project.id)
            response = handler.handle_message(request.data)
            return Response(response)
        except ValueError as e:
            return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)

class UserProfileViewSet(viewsets.ModelViewSet):
    queryset = UserProfile.objects.all()
    serializer_class = UserProfileSerializer
    permission_classes = [AllowAny]  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]
    filterset_fields = ['project', 'balance']
    search_fields = ['username', 'telegram_user_id']
    ordering_fields = ['created_at', 'username']

class TarotDeckViewSet(viewsets.ModelViewSet):
    queryset = TarotDeck.objects.all()
    serializer_class = TarotDeckSerializer
    permission_classes = [AllowAny]  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]
    filterset_fields = ['project']
    search_fields = ['name', 'description']
    ordering_fields = ['created_at', 'name']

class TarotCardViewSet(viewsets.ModelViewSet):
    queryset = TarotCard.objects.all()
    serializer_class = TarotCardSerializer
    permission_classes = [AllowAny]  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]
    filterset_fields = ['deck']
    search_fields = ['name', 'meaning_upright', 'meaning_reversed']
    ordering_fields = ['order', 'name']

class TarotSpreadViewSet(viewsets.ModelViewSet):
    queryset = TarotSpread.objects.all()
    serializer_class = TarotSpreadSerializer
    permission_classes = [AllowAny]  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]
    filterset_fields = ['project', 'num_cards']
    search_fields = ['name', 'description']
    ordering_fields = ['created_at', 'name']

class InterpretationViewSet(viewsets.ModelViewSet):
    queryset = Interpretation.objects.all()
    serializer_class = InterpretationSerializer
    permission_classes = [AllowAny]  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]
    filterset_fields = ['user', 'spread']
    search_fields = ['ai_response']
    ordering_fields = ['created_at']

    @action(detail=False, methods=['post'])
    def create_interpretation(self, request):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —Å AI-–æ—Ç–≤–µ—Ç–æ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            user_id = request.data.get('user')
            spread_id = request.data.get('spread')
            
            if not user_id or not spread_id:
                return Response({
                    'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–æ–ª—è user –∏ spread'
                }, status=status.HTTP_400_BAD_REQUEST)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
            user = UserProfile.objects.get(id=user_id)
            spread = TarotSpread.objects.get(id=spread_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user.balance <= 0:
                return Response({
                    'error': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.'
                }, status=status.HTTP_400_BAD_REQUEST)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞
            cards = TarotCard.objects.filter(deck__project=spread.project).order_by('?')[:spread.num_cards]
            
            if len(cards) < spread.num_cards:
                return Response({
                    'error': f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞. –ù—É–∂–Ω–æ {spread.num_cards}, –¥–æ—Å—Ç—É–ø–Ω–æ {len(cards)}'
                }, status=status.HTTP_400_BAD_REQUEST)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI-–æ—Ç–≤–µ—Ç
            cards_text = ", ".join([card.name for card in cards])
            ai_response = f"""üîÆ –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ —Ä–∞—Å–∫–ª–∞–¥—É "{spread.name}"

–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã: {cards_text}

–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:
–ö–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. 
–ë—É–¥—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã –Ω–æ–≤—ã–º –∏–¥–µ—è–º –∏ –¥–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏. 
–í–ø–µ—Ä–µ–¥–∏ –≤–∞—Å –∂–¥—É—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.

–°–æ–≤–µ—Ç: –°–ª—É—à–∞–π—Ç–µ —Å–≤–æ–µ —Å–µ—Ä–¥—Ü–µ –∏ –Ω–µ –±–æ–π—Ç–µ—Å—å –ø–µ—Ä–µ–º–µ–Ω. 
–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–∞–ª–æ!"""
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
            interpretation = Interpretation.objects.create(
                user=user,
                spread=spread,
                ai_response=ai_response
            )
            interpretation.cards.set(cards)
            
            # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.balance -= 1
            user.save()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            serializer = self.get_serializer(interpretation)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
            
        except UserProfile.DoesNotExist:
            return Response({
                'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=status.HTTP_404_NOT_FOUND)
        except TarotSpread.DoesNotExist:
            return Response({
                'error': '–†–∞—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            return Response({
                'error': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {str(e)}'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

class PackageViewSet(viewsets.ModelViewSet):
    queryset = Package.objects.filter(is_active=True)
    serializer_class = PackageSerializer
    permission_classes = [AllowAny]  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]
    filterset_fields = ['project', 'package_type', 'is_active']
    search_fields = ['name']
    ordering_fields = ['price', 'created_at', 'name']

class PaymentViewSet(viewsets.ModelViewSet):
    queryset = Payment.objects.all()
    serializer_class = PaymentSerializer
    permission_classes = [AllowAny]  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]
    filterset_fields = ['user', 'project', 'package', 'status']
    search_fields = ['external_id']
    ordering_fields = ['created_at', 'amount']

    def get_serializer_class(self):
        if self.action == 'create':
            return PaymentCreateSerializer
        return PaymentSerializer

    @action(detail=False, methods=['post'])
    def test_payment(self, request):
        """–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å PIN-–∫–æ–¥–æ–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            user_id = request.data.get('user')
            project_id = request.data.get('project')
            package_id = request.data.get('package')
            pin_code = request.data.get('pin_code')
            
            if not all([user_id, project_id, package_id]):
                return Response({
                    'error': '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø–æ–ª—è: user, project, package'
                }, status=status.HTTP_400_BAD_REQUEST)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º PIN-–∫–æ–¥
            if pin_code != '8712':
                return Response({
                    'error': '–ù–µ–≤–µ—Ä–Ω—ã–π PIN-–∫–æ–¥. –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 8712'
                }, status=status.HTTP_400_BAD_REQUEST)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã
            user = UserProfile.objects.get(id=user_id)
            project = Project.objects.get(id=project_id)
            package = Package.objects.get(id=package_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–∫–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω
            if not package.is_active:
                return Response({
                    'error': '–ü–∞–∫–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'
                }, status=status.HTTP_400_BAD_REQUEST)
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment = Payment.objects.create(
                user=user,
                project=project,
                package=package,
                amount=package.price,
                status='completed',  # –°—Ä–∞–∑—É –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
                external_id=f'test_payment_{timezone.now().timestamp()}',
                payment_url='https://test-payment.example.com'
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if package.package_type == 'one_time':
                # –†–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å–∫–ª–∞–¥—ã
                user.balance += package.num_readings
            else:
                # –ü–æ–¥–ø–∏—Å–∫–∞ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏
                from datetime import timedelta
                user.subscription_start = timezone.now().date()
                user.subscription_end = timezone.now().date() + timedelta(days=package.subscription_days)
            
            user.save()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            serializer = PaymentSerializer(payment)
            return Response({
                'success': True,
                'message': '–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!',
                'payment': serializer.data,
                'new_balance': user.balance,
                'subscription_end': user.subscription_end
            }, status=status.HTTP_201_CREATED)
            
        except UserProfile.DoesNotExist:
            return Response({
                'error': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=status.HTTP_404_NOT_FOUND)
        except Project.DoesNotExist:
            return Response({
                'error': '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=status.HTTP_404_NOT_FOUND)
        except Package.DoesNotExist:
            return Response({
                'error': '–ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
            }, status=status.HTTP_404_NOT_FOUND)
        except Exception as e:
            return Response({
                'error': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}'
            }, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

    @action(detail=True, methods=['post'])
    def mark_completed(self, request, pk=None):
        """–û—Ç–º–µ—Ç–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π"""
        payment = self.get_object()
        payment.mark_as_completed()
        serializer = self.get_serializer(payment)
        return Response(serializer.data)

    @action(detail=True, methods=['post'])
    def mark_failed(self, request, pk=None):
        """–û—Ç–º–µ—Ç–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—ã–π"""
        payment = self.get_object()
        payment.mark_as_failed()
        serializer = self.get_serializer(payment)
        return Response(serializer.data)

    @action(detail=True, methods=['post'])
    def mark_cancelled(self, request, pk=None):
        """–û—Ç–º–µ—Ç–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π"""
        payment = self.get_object()
        payment.mark_as_cancelled()
        serializer = self.get_serializer(payment)
        return Response(serializer.data)

class TelegramBotViewSet(viewsets.ViewSet):
    """ViewSet –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ Telegram Bot API"""
    permission_classes = [AllowAny]  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    @action(detail=False, methods=['post'])
    def webhook(self, request):
        """–ò–º–∏—Ç–∞—Ü–∏—è webhook –æ—Ç Telegram"""
        project_id = request.data.get('project_id')
        message_data = request.data.get('message', {})
        
        try:
            response = TelegramBotManager.handle_webhook(project_id, message_data)
            return Response(response)
        except ValueError as e:
            return Response({'error': str(e)}, status=status.HTTP_400_BAD_REQUEST)

    @action(detail=False, methods=['get'])
    def active_bots(self, request):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤"""
        bots = TelegramBotManager.get_active_bots()
        serializer = ProjectSerializer(bots, many=True)
        return Response(serializer.data)
