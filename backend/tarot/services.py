import json
import logging
from typing import List, Dict, Any
from django.conf import settings
from django.core.cache import cache

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π SDK
try:
    from yandex_cloud_ml_sdk import YCloudML
    YANDEX_SDK_AVAILABLE = True
except ImportError:
    YANDEX_SDK_AVAILABLE = False
    logging.warning("Yandex Cloud ML SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

logger = logging.getLogger(__name__)

class YandexGPTService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å YandexGPT Lite —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π SDK"""
    
    def __init__(self):
        self.api_key = getattr(settings, 'YANDEX_API_KEY', None)
        self.folder_id = getattr(settings, 'YANDEX_FOLDER_ID', None)
        self.sdk = None
        self.model = None
        
        if not self.api_key or not self.folder_id:
            logger.warning("YandexGPT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç API_KEY –∏–ª–∏ FOLDER_ID")
            return
            
        if not YANDEX_SDK_AVAILABLE:
            logger.warning("Yandex Cloud ML SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
            
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º SDK
            self.sdk = YCloudML(folder_id=self.folder_id, auth=self.api_key)
            # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å
            self.model = self.sdk.models.completions('yandexgpt-lite')
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.model = self.model.configure(
                temperature=0.7,
                max_tokens=1000
            )
            logger.info("YandexGPT SDK —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ YandexGPT SDK: {e}")
            self.sdk = None
            self.model = None
    
    def generate_interpretation(self, spread_name: str, cards: List[Dict], user_context: str = "") -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–∞—Å–∫–ª–∞–¥–∞ —Å –ø–æ–º–æ—â—å—é YandexGPT Lite
        
        Args:
            spread_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞
            cards: –°–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç —Å –∏—Ö –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            user_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–µ–π
        """
        if not self.model:
            logger.warning("YandexGPT –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return self._get_fallback_interpretation(spread_name, cards)
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
            prompt = self._build_prompt(spread_name, cards, user_context)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ YandexGPT —á–µ—Ä–µ–∑ SDK
            result = self.model.run(prompt)
            
            if result:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                for alternative in result:
                    if hasattr(alternative, 'text') and alternative.text:
                        return alternative.text.strip()
                
                logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT")
                return self._get_fallback_interpretation(spread_name, cards)
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç YandexGPT")
                return self._get_fallback_interpretation(spread_name, cards)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: {e}")
            return self._get_fallback_interpretation(spread_name, cards)
    
    def _build_prompt(self, spread_name: str, cards: List[Dict], user_context: str) -> str:
        """–°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è YandexGPT"""
        
        cards_text = "\n".join([
            f"‚Ä¢ {card['name']} - {card['meaning']}"
            for card in cards
        ])
        
        prompt = f"""–¢—ã –æ–ø—ã—Ç–Ω—ã–π —Ç–∞—Ä–æ–ª–æ–≥ —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –∫–∞—Ä—Ç –¢–∞—Ä–æ.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é, –Ω–æ —ë–º–∫—É—é –∏ —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é —Ä–∞—Å–∫–ª–∞–¥–∞.

–†–ê–°–ö–õ–ê–î: {spread_name}

–í–´–ü–ê–í–®–ò–ï –ö–ê–†–¢–´:
{cards_text}

{f'–ö–û–ù–¢–ï–ö–°–¢ –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {user_context}' if user_context else ''}

–°–æ–∑–¥–∞–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–∫–ª—é—á–∞–µ—Ç:
1. –û–±—â–∏–π —Å–º—ã—Å–ª —Ä–∞—Å–∫–ª–∞–¥–∞ (–¥–æ–±–∞–≤—å 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–∑–∏—Ç–∏–≤–æ–º)
2. –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–∞—Å–∫–ª–∞–¥–∞
3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–í –æ—Ç–≤–µ—Ç–∞—Ö –¥–æ–±–∞–≤–ª—è–π —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∑–∞–≥–∞–¥–æ—á–Ω–æ—Å—Ç–∏. –î–∞–≤–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–∂–∞—Ç—ã–µ, –Ω–æ —ë–º–∫–∏–µ –æ—Ç–≤–µ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è —É–∫—Ä–∞—à–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞. –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""

        return prompt
    
    def _get_fallback_interpretation(self, spread_name: str, cards: List[Dict]) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–ø–∞—Å–Ω—É—é –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é, –µ—Å–ª–∏ AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        
        cards_text = ", ".join([card['name'] for card in cards])
        
        interpretations = [
            f"""üîÆ –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ —Ä–∞—Å–∫–ª–∞–¥—É "{spread_name}"

–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã: {cards_text}

–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:
–ö–∞—Ä—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —á—Ç–æ –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. 
–ë—É–¥—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã –Ω–æ–≤—ã–º –∏–¥–µ—è–º –∏ –¥–æ–≤–µ—Ä—è–π—Ç–µ —Å–≤–æ–µ–π –∏–Ω—Ç—É–∏—Ü–∏–∏. 
–í–ø–µ—Ä–µ–¥–∏ –≤–∞—Å –∂–¥—É—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.

–°–æ–≤–µ—Ç: –°–ª—É—à–∞–π—Ç–µ —Å–≤–æ–µ —Å–µ—Ä–¥—Ü–µ –∏ –Ω–µ –±–æ–π—Ç–µ—Å—å –ø–µ—Ä–µ–º–µ–Ω. 
–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–∞–ª–æ! üåü""",
            
            f"""‚ú® –ú–∞–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: "{spread_name}"

–ö–∞—Ä—Ç—ã: {cards_text}

–í–∞—à–∏ –∫–∞—Ä—Ç—ã —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Ç —Ç–∞–π–Ω—ã –±—É–¥—É—â–µ–≥–æ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É. 
–í—Å–µ–ª–µ–Ω–Ω–∞—è –±–ª–∞–≥–æ–≤–æ–ª–∏—Ç –≤–∞–º –≤ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥. 
–î–æ–≤–µ—Ä—å—Ç–µ—Å—å –º—É–¥—Ä–æ—Å—Ç–∏ –∫–∞—Ä—Ç –∏ —Å–ª–µ–¥—É–π—Ç–µ –∑–Ω–∞–∫–∞–º —Å—É–¥—å–±—ã.

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫ –∑–Ω–∞–∫–∞–º –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º, 
–∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤—è—Ç—Å—è –Ω–∞ –≤–∞—à–µ–º –ø—É—Ç–∏. üåô""",
            
            f"""üåü –¢–æ–ª–∫–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∞ "{spread_name}"

–í—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã: {cards_text}

–ö–∞—Ä—Ç—ã –¢–∞—Ä–æ –≥–æ–≤–æ—Ä—è—Ç –æ —Ç–æ–º, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –ø–æ—Ä–æ–≥–µ –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π. 
–í–∞—à–∞ –∏–Ω—Ç—É–∏—Ü–∏—è —Å–µ–π—á–∞—Å –æ—Å–æ–±–µ–Ω–Ω–æ —Å–∏–ª—å–Ω–∞ - –ø—Ä–∏—Å–ª—É—à–∏–≤–∞–π—Ç–µ—Å—å –∫ –Ω–µ–π. 
–í–ø–µ—Ä–µ–¥–∏ –∂–¥—É—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏.

–ù–∞—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: –í–µ—Ä—å—Ç–µ –≤ —Å–µ–±—è –∏ —Å–≤–æ–∏ —Å–∏–ª—ã. 
–í—Å–µ–ª–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∞—à–∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è! ‚ú®"""
        ]
        
        import random
        return random.choice(interpretations)
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ YandexGPT"""
        if not self.model:
            return False
        
        try:
            test_prompt = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: '–†–∞–±–æ—Ç–∞–µ—Ç'"
            result = self.model.run(test_prompt)
            
            if result:
                for alternative in result:
                    if hasattr(alternative, 'text') and alternative.text:
                        return "—Ä–∞–±–æ—Ç–∞–µ—Ç" in alternative.text.lower()
            
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def get_model_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        return {
            'sdk_available': YANDEX_SDK_AVAILABLE,
            'model_initialized': self.model is not None,
            'api_key_configured': bool(self.api_key),
            'folder_id_configured': bool(self.folder_id),
            'connection_test': self.test_connection() if self.model else False
        }


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
yandex_gpt_service = YandexGPTService() 