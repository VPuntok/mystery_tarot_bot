import { ApiService } from './services/api.js';
import { UI } from './ui.js';
import { marked } from 'marked';

export class TarotApp {
    constructor() {
        this.api = new ApiService();
        this.ui = new UI();
        this.currentUser = null;
        this.currentProject = null;
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º marked –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        marked.setOptions({
            breaks: true, // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
            gfm: true,    // GitHub Flavored Markdown
            sanitize: false // –û—Ç–∫–ª—é—á–∞–µ–º —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è —ç–º–æ–¥–∑–∏
        });
    }

    async init() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
            let tgUser = window.Telegram.WebApp.initDataUnsafe?.user;
            
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (–ª–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (!tgUser) {
                console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
                tgUser = {
                    id: 123456789,
                    username: 'test_user',
                    first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
                    last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                };
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await this.initializeApp(tgUser);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            this.showMainMenu();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.ui.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ' + error.message);
        }
    }

    async initializeApp(tgUser) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
        const projects = await this.api.getProjects();
        if (projects.length === 0) {
            throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤');
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        this.currentProject = this.selectProject(projects);
        
        console.log(`–í—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç: ${this.currentProject.name} (ID: ${this.currentProject.id})`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.currentUser = await this.api.getOrCreateUser({
            telegram_user_id: tgUser.id,
            username: tgUser.username,
            project: this.currentProject.id
        });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã
        await this.loadAndApplyThemeSettings();
    }

    async loadAndApplyThemeSettings() {
        try {
            const response = await this.api.getThemeSettings(this.currentProject.id);
            if (response.success && response.theme_settings) {
                this.applyThemeSettings(response.theme_settings);
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã:', error);
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        }
    }

    applyThemeSettings(settings) {
        const root = document.documentElement;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞
        if (settings.primary_color) {
            root.style.setProperty('--primary-color', settings.primary_color);
            root.style.setProperty('--primary-hover', this.adjustColor(settings.primary_color, -20));
        }
        
        if (settings.secondary_color) {
            root.style.setProperty('--secondary-color', settings.secondary_color);
        }
        
        if (settings.accent_color) {
            root.style.setProperty('--accent-color', settings.accent_color);
        }
        
        if (settings.bg_primary) {
            root.style.setProperty('--bg-primary', settings.bg_primary);
        }
        
        if (settings.bg_secondary) {
            root.style.setProperty('--bg-secondary', settings.bg_secondary);
        }
        
        if (settings.bg_card) {
            root.style.setProperty('--bg-card', settings.bg_card);
        }
        
        if (settings.text_primary) {
            root.style.setProperty('--text-primary', settings.text_primary);
        }
        
        if (settings.text_secondary) {
            root.style.setProperty('--text-secondary', settings.text_secondary);
        }
        
        if (settings.text_muted) {
            root.style.setProperty('--text-muted', settings.text_muted);
        }
        
        if (settings.border_color) {
            root.style.setProperty('--border-color', settings.border_color);
        }
        
        if (settings.font_family) {
            root.style.setProperty('--font-family', settings.font_family);
            document.body.style.fontFamily = settings.font_family;
        }
        
        if (settings.border_radius) {
            root.style.setProperty('--border-radius', settings.border_radius);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤—ã—Ö —Ü–≤–µ—Ç–æ–≤
        this.updateGradients(settings);
    }

    updateGradients(settings) {
        const root = document.documentElement;
        
        const primary = settings.primary_color || '#6366f1';
        const secondary = settings.secondary_color || '#8b5cf6';
        const accent = settings.accent_color || '#f59e0b';
        
        root.style.setProperty('--gradient-primary', `linear-gradient(135deg, ${primary} 0%, ${secondary} 100%)`);
        root.style.setProperty('--gradient-accent', `linear-gradient(135deg, ${accent} 0%, ${this.adjustColor(accent, 20)} 100%)`);
    }

    adjustColor(color, amount) {
        // –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å–≤–µ—Ç–ª–µ–Ω–∏—è/–∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
        const hex = color.replace('#', '');
        const num = parseInt(hex, 16);
        const r = Math.min(255, Math.max(0, (num >> 16) + amount));
        const g = Math.min(255, Math.max(0, ((num >> 8) & 0x00FF) + amount));
        const b = Math.min(255, Math.max(0, (num & 0x0000FF) + amount));
        return `#${((r << 16) | (g << 8) | b).toString(16).padStart(6, '0')}`;
    }

    selectProject(projects) {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const urlParams = new URLSearchParams(window.location.search);
        const projectId = urlParams.get('project_id');
        const projectName = urlParams.get('project_name');
        
        // 2. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω project_id –≤ URL
        if (projectId) {
            const project = projects.find(p => p.id == projectId);
            if (project) {
                console.log(`–ü—Ä–æ–µ–∫—Ç –≤—ã–±—Ä–∞–Ω –ø–æ ID –∏–∑ URL: ${project.name}`);
                return project;
            } else {
                console.warn(`–ü—Ä–æ–µ–∫—Ç —Å ID ${projectId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
            }
        }
        
        // 3. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω project_name –≤ URL
        if (projectName) {
            const project = projects.find(p => p.name.toLowerCase().includes(projectName.toLowerCase()));
            if (project) {
                console.log(`–ü—Ä–æ–µ–∫—Ç –≤—ã–±—Ä–∞–Ω –ø–æ –∏–º–µ–Ω–∏ –∏–∑ URL: ${project.name}`);
                return project;
            } else {
                console.warn(`–ü—Ä–æ–µ–∫—Ç —Å –∏–º–µ–Ω–µ–º "${projectName}" –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
            }
        }
        
        // 4. Fallback: –∏—â–µ–º –ø—Ä–æ–µ–∫—Ç "Mystic Tarot Bot"
        const mysticProject = projects.find(p => p.name.includes('Mystic Tarot Bot'));
        if (mysticProject) {
            console.log(`–ü—Ä–æ–µ–∫—Ç –≤—ã–±—Ä–∞–Ω –ø–æ –∏–º–µ–Ω–∏ "Mystic Tarot Bot": ${mysticProject.name}`);
            return mysticProject;
        }
        
        // 5. –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
        const activeProject = projects.find(p => p.status === 'active');
        if (activeProject) {
            console.log(`–ü—Ä–æ–µ–∫—Ç –≤—ã–±—Ä–∞–Ω –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π: ${activeProject.name}`);
            return activeProject;
        }
        
        // 6. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
        console.log(`–ü—Ä–æ–µ–∫—Ç –≤—ã–±—Ä–∞–Ω –∫–∞–∫ –ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ: ${projects[0].name}`);
        return projects[0];
    }

    showMainMenu() {
        const content = `
            <div class="balance-header">
                <div class="balance-info">
                    üí∞ –ë–∞–ª–∞–Ω—Å: ${this.currentUser.balance} —Ä–∞—Å–∫–ª–∞–¥–æ–≤
                </div>
            </div>
            
            <div class="card">
                <h1>üîÆ Mystic Tarot</h1>
                <p class="text-center text-muted">–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è</p>
                
                <div class="menu-grid">
                    <div class="menu-tile card-of-day" onclick="app.showCardOfDay()">
                        <div class="menu-tile-content">
                            <span class="menu-tile-icon">üåÖ</span>
                            <div class="menu-tile-title">–ö–∞—Ä—Ç–∞ –¥–Ω—è</div>
                            <div class="menu-tile-subtitle">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ</div>
                        </div>
                    </div>
                    
                    <div class="menu-tile" onclick="app.showSpreads()">
                        <div class="menu-tile-content">
                            <span class="menu-tile-icon">üîÆ</span>
                            <div class="menu-tile-title">–†–∞—Å–∫–ª–∞–¥—ã</div>
                            <div class="menu-tile-subtitle">–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ</div>
                        </div>
                    </div>
                    
                    <div class="menu-tile" onclick="app.showPackages()">
                        <div class="menu-tile-content">
                            <span class="menu-tile-icon">üì¶</span>
                            <div class="menu-tile-title">–ü–∞–∫–µ—Ç—ã</div>
                            <div class="menu-tile-subtitle">–ö—É–ø–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥—ã</div>
                        </div>
                    </div>
                    
                    <div class="menu-tile" onclick="app.showHistory()">
                        <div class="menu-tile-content">
                            <span class="menu-tile-icon">üìö</span>
                            <div class="menu-tile-title">–ò—Å—Ç–æ—Ä–∏—è</div>
                            <div class="menu-tile-subtitle">–ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞—Å–∫–ª–∞–¥—ã</div>
                        </div>
                    </div>
                </div>
                
                <small class="text-center text-muted" style="display: block; margin-top: 16px;">
                    –ü—Ä–æ–µ–∫—Ç: ${this.currentProject.name}
                </small>
            </div>
        `;
        
        this.ui.updateContent(content);
    }

    async showSpreads() {
        try {
            this.ui.showLoading('–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–∫–ª–∞–¥–æ–≤...');
            
            const spreads = await this.api.getSpreads(this.currentProject.id);
            
            if (spreads.length === 0) {
                this.ui.showError('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤');
                return;
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å–∫–ª–∞–¥—ã, —É–±–∏—Ä–∞—è –∫–∞—Ä—Ç—É –¥–Ω—è
            const filteredSpreads = spreads.filter(spread => 
                !spread.name.toLowerCase().includes('–∫–∞—Ä—Ç–∞ –¥–Ω—è')
            );

            if (filteredSpreads.length === 0) {
                this.ui.showError('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤');
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–∫–ª–∞–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–∞—Ö
            this.currentSpreads = filteredSpreads;

            const spreadsHtml = filteredSpreads.map(spread => `
                <div class="spread-tile" onclick="app.selectSpread(${spread.id})">
                    <div class="spread-tile-content">
                        <span class="spread-tile-icon">üîÆ</span>
                        <div class="spread-tile-title">${spread.name}</div>
                        <div class="spread-tile-subtitle">${spread.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</div>
                        <div class="spread-tile-cards">–ö–∞—Ä—Ç: ${spread.num_cards}</div>
                    </div>
                </div>
            `).join('');

            const content = `
                <div class="balance-header">
                    <div class="balance-info">
                        üí∞ –ë–∞–ª–∞–Ω—Å: ${this.currentUser.balance} —Ä–∞—Å–∫–ª–∞–¥–æ–≤
                    </div>
                    <a href="#" class="back-button" onclick="app.showMainMenu()">
                        ‚Üê –ù–∞–∑–∞–¥
                    </a>
                </div>
                
                <div class="card">
                    <h2>üîÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥</h2>
                    <div class="spreads-grid">
                        ${spreadsHtml}
                    </div>
                </div>
            `;
            
            this.ui.updateContent(content);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤:', error);
            this.ui.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤');
        }
    }

    async selectSpread(spreadId) {
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞
            this.showQuestionInput(spreadId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–∞:', error);
            this.ui.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–∞');
        }
    }

    showQuestionInput(spreadId) {
        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–∫–ª–∞–¥–µ
        const spread = this.currentSpreads.find(s => s.id === spreadId);
        if (!spread) {
            this.ui.showError('–†–∞—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const content = `
            <div class="balance-header">
                <div class="balance-info">
                    üí∞ –ë–∞–ª–∞–Ω—Å: ${this.currentUser.balance} —Ä–∞—Å–∫–ª–∞–¥–æ–≤
                </div>
                <a href="#" class="back-button" onclick="app.showSpreads()">
                    ‚Üê –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å–∫–ª–∞–¥–∞–º
                </a>
            </div>
            
            <div class="spread-page">
                <h2>üîÆ ${spread.name}</h2>
                <div class="spread-description">
                    <p>${spread.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
                    <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç:</strong> ${spread.num_cards}</p>
                </div>
                <div class="question-section">
                    <label for="user-question"><strong>–ù–∞ –∫–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –¥–µ–ª–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥?</strong></label>
                    <textarea id="user-question" class="question-textarea" rows="3" placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..." autofocus></textarea>
                </div>
                <div class="action-buttons-row">
                    <button class="button primary" onclick="app.saveUserQuestionAndDealCards(${spreadId})">
                        üé¥ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                    </button>
                </div>
            </div>
        `;
        this.ui.updateContent(content);
    }

    saveUserQuestionAndDealCards(spreadId) {
        const question = document.getElementById('user-question')?.value?.trim() || '';
        this.currentUserQuestion = question;
        this.dealCards(spreadId);
    }

    async dealCards(spreadId) {
        try {
            if (this.currentUser.balance <= 0) {
                this.ui.showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.');
                return;
            }
            this.ui.showLoading('–†–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã...');
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∞, –ø–µ—Ä–µ–¥–∞–µ–º user_context
            const cardsData = await this.api.getSpreadCards({
                user: this.currentUser.id,
                spread: spreadId,
                user_context: this.currentUserQuestion || ''
            });
            this.currentUser.balance -= 1;
            this.showCardsResult(cardsData, spreadId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç:', error);
            this.ui.showError('–û—à–∏–±–∫–∞ —Ä–∞–∑–¥–∞—á–∏ –∫–∞—Ä—Ç: ' + (error.response?.data?.error || error.message));
        }
    }

    showCardsResult(cardsData, spreadId) {
        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å–∫–ª–∞–¥–µ
        const spread = this.currentSpreads.find(s => s.id === spreadId);
        // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è –∫–∞—Ä—Ç (—Å—Ä–∞–∑—É –ª–∏—Ü–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–æ–π –≤–≤–µ—Ä—Ö)
        const cardsHtml = (cardsData.cards_names || []).map((cardName, idx) => {
            const imgUrl = cardsData.cards_images && cardsData.cards_images[idx];
            const isReversed = cardsData.cards_used && cardsData.cards_used[idx] && cardsData.cards_used[idx].is_reversed;
            return `
                <div class="card-item${isReversed ? ' reversed' : ''}">
                    ${imgUrl ? `<img src="${imgUrl}" alt="${cardName}" class="card-image"/>` : ''}
                    <div class="card-name">${cardName}</div>
                    ${isReversed ? '<div class="card-status">üîÑ –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è</div>' : '<div class="card-status">‚¨ÜÔ∏è –ü—Ä—è–º–∞—è</div>'}
                </div>
            `;
        }).join('');

        const questionBlock = this.currentUserQuestion ? `
            <div class="user-question-block">
                <strong>–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong><br>
                <span>${this.currentUserQuestion}</span>
            </div>
        ` : '';

        const content = `
            <div class="balance-header">
                <div class="balance-info">
                    üí∞ –û—Å—Ç–∞–ª–æ—Å—å —Ä–∞—Å–∫–ª–∞–¥–æ–≤: ${this.currentUser.balance}
                </div>
                <a href="#" class="back-button" onclick="app.showMainMenu()">
                    ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
                </a>
            </div>
            
            <div class="cards-result">
                ${questionBlock}
                <div class="spread-info">
                    <h3>–†–∞—Å–∫–ª–∞–¥: ${spread ? spread.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥'}</h3>
                </div>
                <div class="cards-section">
                    <h4>–í—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã:</h4>
                    <div class="cards-list">
                        ${cardsHtml}
                    </div>
                </div>
                <div class="action-buttons-row">
                    <button class="button primary" onclick="app.getInterpretation(${spreadId}, ${cardsData.interpretation_id})">
                        üîÆ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
                    </button>
                </div>
            </div>
        `;
        this.ui.updateContent(content);
        this.currentCardsData = cardsData;
    }

    async getInterpretation(spreadId, interpretationId) {
        try {
            this.showInterpretationLoading();
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é, –ø–µ—Ä–µ–¥–∞–µ–º user_context
            const interpretation = await this.api.createInterpretation({
                user: this.currentUser.id,
                spread: spreadId,
                interpretation_id: interpretationId,
                user_context: this.currentUserQuestion || ''
            });
            this.addInterpretationToPage(interpretation);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏:', error);
            this.ui.showError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: ' + (error.response?.data?.error || error.message));
        }
    }

    showInterpretationLoading() {
        // –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ü–∏—é action-buttons –∏ –∑–∞–º–µ–Ω—è–µ–º –µ—ë –Ω–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        const actionButtons = document.querySelector('.action-buttons-row');
        if (actionButtons) {
            actionButtons.innerHTML = `
                <div class="interpretation-loading">
                    <div class="loading-spinner"></div>
                    <p>üîÆ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é...</p>
                </div>
            `;
        }
    }

    addInterpretationToPage(interpretation) {
        // –†–µ–Ω–¥–µ—Ä–∏–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ Markdown
        const interpretationHtml = interpretation.ai_response 
            ? marked.parse(interpretation.ai_response)
            : '<p class="text-muted">–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>';
        // –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ü–∏—é action-buttons –∏ –∑–∞–º–µ–Ω—è–µ–º –µ—ë –Ω–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
        const actionButtons = document.querySelector('.action-buttons-row');
        if (actionButtons) {
            actionButtons.innerHTML = `
                <div class="interpretation-section">
                    <h4>üìñ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</h4>
                    <div class="markdown-content">
                        ${interpretationHtml}
                    </div>
                </div>
                <div class="interpretation-footer">
                    <div class="ai-status">
                        ü§ñ AI —Å—Ç–∞—Ç—É—Å: ${interpretation.ai_service_status || 'active'}
                    </div>
                </div>
            `;
        }
    }

    async showPackages() {
        try {
            this.ui.showLoading('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ø–∞–∫–µ—Ç–æ–≤...');
            
            const packages = await this.api.getPackages(this.currentProject.id);
            
            if (packages.length === 0) {
                this.ui.showError('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ø–∞–∫–µ—Ç–æ–≤');
                return;
            }

            const packagesHtml = packages.map(pkg => `
                <div class="package-tile" onclick="app.buyPackage(${pkg.id})">
                    <div class="package-tile-content">
                        <span class="package-tile-icon">üì¶</span>
                        <div class="package-tile-title">${pkg.name}</div>
                        <div class="package-tile-price">${pkg.price}‚ÇΩ</div>
                        <div class="package-tile-description">
                            ${pkg.package_type === 'one_time' 
                                ? `${pkg.num_readings} —Ä–∞—Å–∫–ª–∞–¥–æ–≤`
                                : `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${pkg.subscription_days} –¥–Ω–µ–π`
                            }
                        </div>
                    </div>
                </div>
            `).join('');

            const content = `
                <div class="balance-header">
                    <div class="balance-info">
                        üí∞ –ë–∞–ª–∞–Ω—Å: ${this.currentUser.balance} —Ä–∞—Å–∫–ª–∞–¥–æ–≤
                    </div>
                    <a href="#" class="back-button" onclick="app.showMainMenu()">
                        ‚Üê –ù–∞–∑–∞–¥
                    </a>
                </div>
                
                <div class="card">
                    <h2>üì¶ –ü–æ–¥–ø–∏—Å–∫–∏ –∏ –ø–∞–∫–µ—Ç—ã —Ä–∞—Å–∫–ª–∞–¥–æ–≤</h2>
                    <p class="text-center text-muted">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</p>
                    <div class="packages-grid">
                        ${packagesHtml}
                    </div>
                </div>
            `;
            
            this.ui.updateContent(content);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–∫–µ—Ç–æ–≤:', error);
            this.ui.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –ø–∞–∫–µ—Ç–æ–≤');
        }
    }

    async buyPackage(packageId) {
        try {
            this.ui.showLoading('–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...');
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º PIN-–∫–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const pinCode = prompt('–í–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (8712):');
            
            if (!pinCode) {
                this.ui.showError('PIN-–∫–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω');
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
            const response = await this.api.createTestPayment({
                user: this.currentUser.id,
                project: this.currentProject.id,
                package: packageId,
                pin_code: pinCode
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.currentUser.balance = response.new_balance;
            if (response.subscription_end) {
                this.currentUser.subscription_end = response.subscription_end;
            }
            
            this.ui.showSuccess(`–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${response.new_balance} —Ä–∞—Å–∫–ª–∞–¥–æ–≤`);
            
            setTimeout(() => {
                this.showMainMenu();
            }, 2000);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
            this.ui.showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ' + (error.response?.data?.error || error.message));
        }
    }

    async showHistory() {
        try {
            this.ui.showLoading('–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...');
            
            const interpretations = await this.api.getInterpretations(this.currentUser.id);
            
            if (interpretations.length === 0) {
                this.ui.showError('–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç–∞');
                return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–∞—Ö
            this.currentHistory = interpretations;

            const historyHtml = interpretations.map((interpretation, index) => {
                const date = new Date(interpretation.created_at);
                const formattedDate = date.toLocaleDateString('ru-RU');
                const formattedTime = date.toLocaleTimeString('ru-RU', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                });
                
                return `
                    <div class="history-tile" onclick="app.openHistoryItem(${index})">
                        <div class="history-tile-content">
                            <span class="history-tile-icon">üîÆ</span>
                            <div class="history-tile-title">${interpretation.spread_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥'}</div>
                            <div class="history-tile-date">${formattedDate}</div>
                            <div class="history-tile-time">${formattedTime}</div>
                        </div>
                    </div>
                `;
            }).join('');

            const content = `
                <div class="balance-header">
                    <div class="balance-info">
                        üí∞ –ë–∞–ª–∞–Ω—Å: ${this.currentUser.balance} —Ä–∞—Å–∫–ª–∞–¥–æ–≤
                    </div>
                    <a href="#" class="back-button" onclick="app.showMainMenu()">
                        ‚Üê –ù–∞–∑–∞–¥
                    </a>
                </div>
                
                <div class="card">
                    <h2>üìö –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤</h2>
                    <div class="history-grid">
                        ${historyHtml}
                    </div>
                </div>
            `;
            
            this.ui.updateContent(content);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
            this.ui.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
        }
    }

    openHistoryItem(index) {
        const interpretation = this.currentHistory[index];
        if (!interpretation) {
            this.ui.showError('–†–∞—Å–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const date = new Date(interpretation.created_at);
        const formattedDate = date.toLocaleDateString('ru-RU');
        const formattedTime = date.toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è –∫–∞—Ä—Ç
        const cardsHtml = (interpretation.cards_names || []).map((cardName, idx) => {
            const imgUrl = interpretation.cards_images && interpretation.cards_images[idx];
            const isReversed = interpretation.cards_used && interpretation.cards_used[idx] && interpretation.cards_used[idx].is_reversed;
            return `
                <div class="card-item${isReversed ? ' reversed' : ''}">
                    ${imgUrl ? `<img src="${imgUrl}" alt="${cardName}" class="card-image"/>` : ''}
                    <div class="card-name">${cardName}</div>
                    ${isReversed ? '<div class="card-status">üîÑ –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è</div>' : '<div class="card-status">‚¨ÜÔ∏è –ü—Ä—è–º–∞—è</div>'}
                </div>
            `;
        }).join('');

        // –†–µ–Ω–¥–µ—Ä–∏–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ Markdown
        const interpretationHtml = interpretation.ai_response 
            ? marked.parse(interpretation.ai_response)
            : '<p class="text-muted">–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>';

        // –ë–ª–æ–∫ —Å –≤–æ–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const questionBlock = interpretation.user_question ? `
            <div class="user-question-block">
                <strong>–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</strong><br>
                <span>${interpretation.user_question}</span>
            </div>
        ` : '';

        const content = `
            <div class="balance-header">
                <div class="balance-info">
                    üí∞ –ë–∞–ª–∞–Ω—Å: ${this.currentUser.balance} —Ä–∞—Å–∫–ª–∞–¥–æ–≤
                </div>
                <a href="#" class="back-button" onclick="app.showHistory()">
                    ‚Üê –ù–∞–∑–∞–¥ –∫ –∏—Å—Ç–æ—Ä–∏–∏
                </a>
            </div>
            
            <div class="history-detail">
                <div class="history-detail-header">
                    <h2>üîÆ ${interpretation.spread_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥'}</h2>
                    <div class="history-detail-date">
                        üìÖ ${formattedDate} –≤ ${formattedTime}
                    </div>
                </div>
                
                ${questionBlock}
                
                <div class="cards-section">
                    <h4>–í—ã–ø–∞–≤—à–∏–µ –∫–∞—Ä—Ç—ã:</h4>
                    <div class="cards-list">
                        ${cardsHtml}
                    </div>
                </div>
                
                <div class="interpretation-section">
                    <h4>üìñ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</h4>
                    <div class="markdown-content">
                        ${interpretationHtml}
                    </div>
                </div>
            </div>
        `;
        
        this.ui.updateContent(content);
    }

    async showCardOfDay() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Ä—Ç–∞ –¥–Ω—è –¥–ª—è —Å–µ–≥–æ–¥–Ω—è
            const today = new Date().toDateString();
            const storedCardOfDay = localStorage.getItem(`cardOfDay_${this.currentUser.id}_${today}`);
            
            if (storedCardOfDay) {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É –¥–Ω—è
                const cardData = JSON.parse(storedCardOfDay);
                this.showCardOfDayResult(cardData);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è
                const storedInterpretation = localStorage.getItem(`cardOfDayInterpretation_${this.currentUser.id}_${today}`);
                if (storedInterpretation) {
                    const interpretation = JSON.parse(storedInterpretation);
                    this.addCardOfDayInterpretation(interpretation);
                } else {
                    // –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ—ë
                    this.getCardOfDayInterpretation();
                }
            } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–Ω—è
                if (this.currentUser.balance <= 0) {
                    this.ui.showError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¥–ª—è –∫–∞—Ä—Ç—ã –¥–Ω—è. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.');
                    return;
                }
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä —Å —Ç–µ–∫—Å—Ç–æ–º
                this.showCardOfDayLoading();
                
                // –ù–∞—Ö–æ–¥–∏–º —Ä–∞—Å–∫–ª–∞–¥ "–ö–∞—Ä—Ç–∞ –¥–Ω—è" –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
                const spreads = await this.api.getSpreads(this.currentProject.id);
                const cardOfDaySpread = spreads.find(s => s.name.toLowerCase().includes('–∫–∞—Ä—Ç–∞ –¥–Ω—è'));
                
                if (!cardOfDaySpread) {
                    this.ui.showError('–†–∞—Å–∫–ª–∞–¥ "–ö–∞—Ä—Ç–∞ –¥–Ω—è" –Ω–µ –Ω–∞–π–¥–µ–Ω');
                    return;
                }
                
                // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞—Å–∫–ª–∞–¥ "–ö–∞—Ä—Ç–∞ –¥–Ω—è" (1 –∫–∞—Ä—Ç–∞)
                const cardData = await this.api.getSpreadCards({
                    user: this.currentUser.id,
                    spread: cardOfDaySpread.id,
                    user_context: '–ö–∞—Ä—Ç–∞ –¥–Ω—è - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ'
                });
                
                this.currentUser.balance -= 1;
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç—É –¥–Ω—è –≤ localStorage
                localStorage.setItem(`cardOfDay_${this.currentUser.id}_${today}`, JSON.stringify(cardData));
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                setTimeout(() => {
                    this.showCardOfDayResult(cardData);
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
                    this.getCardOfDayInterpretation();
                }, 1500);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
            this.ui.showError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –¥–Ω—è: ' + (error.response?.data?.error || error.message));
        }
    }

    showCardOfDayLoading() {
        const content = `
            <div class="card">
                <div class="card-of-day-loading">
                    <div class="loading-spinner"></div>
                    <h3>üåÖ –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—É –¥–Ω—è</h3>
                    <p class="text-muted">–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –º—ã –≤—ã–±–∏—Ä–∞–µ–º –≤–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...</p>
                </div>
            </div>
        `;
        this.ui.updateContent(content);
    }

    showCardOfDayResult(cardData) {
        const cardName = cardData.cards_names && cardData.cards_names[0];
        const imgUrl = cardData.cards_images && cardData.cards_images[0];
        const isReversed = cardData.cards_used && cardData.cards_used[0] && cardData.cards_used[0].is_reversed;
        
        const cardHtml = `
            <div class="card-of-day-item${isReversed ? ' reversed' : ''}">
                ${imgUrl ? `<img src="${imgUrl}" alt="${cardName}" class="card-of-day-image"/>` : ''}
                <div class="card-of-day-name">${cardName}</div>
                ${isReversed ? '<div class="card-of-day-status">üîÑ –ü–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–∞—è</div>' : '<div class="card-of-day-status">‚¨ÜÔ∏è –ü—Ä—è–º–∞—è</div>'}
            </div>
        `;

        const content = `
            <div class="balance-header">
                <div class="balance-info">
                    üí∞ –ë–∞–ª–∞–Ω—Å: ${this.currentUser.balance} —Ä–∞—Å–∫–ª–∞–¥–æ–≤
                </div>
                <a href="#" class="back-button" onclick="app.showMainMenu()">
                    ‚Üê –ù–∞–∑–∞–¥
                </a>
            </div>
            
            <div class="card">
                <h2>üåÖ –ö–∞—Ä—Ç–∞ –¥–Ω—è</h2>
                <p class="text-center text-muted">–í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</p>
                
                <div class="card-of-day-content">
                    <div class="card-of-day-left">
                        ${cardHtml}
                    </div>
                    <div class="card-of-day-right">
                        <div class="interpretation-loading">
                            <div class="loading-spinner"></div>
                            <p>üîÆ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é...</p>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        this.ui.updateContent(content);
        this.currentCardOfDayData = cardData;
    }

    async getCardOfDayInterpretation() {
        try {
            // –ù–∞—Ö–æ–¥–∏–º —Ä–∞—Å–∫–ª–∞–¥ "–ö–∞—Ä—Ç–∞ –¥–Ω—è" –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
            const spreads = await this.api.getSpreads(this.currentProject.id);
            const cardOfDaySpread = spreads.find(s => s.name.toLowerCase().includes('–∫–∞—Ä—Ç–∞ –¥–Ω—è'));
            
            if (!cardOfDaySpread) {
                this.ui.showError('–†–∞—Å–∫–ª–∞–¥ "–ö–∞—Ä—Ç–∞ –¥–Ω—è" –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –¥–ª—è –∫–∞—Ä—Ç—ã –¥–Ω—è
            const interpretation = await this.api.createInterpretation({
                user: this.currentUser.id,
                spread: cardOfDaySpread.id,
                interpretation_id: this.currentCardOfDayData.interpretation_id,
                user_context: '–ö–∞—Ä—Ç–∞ –¥–Ω—è - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ'
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ localStorage
            const today = new Date().toDateString();
            localStorage.setItem(`cardOfDayInterpretation_${this.currentUser.id}_${today}`, JSON.stringify(interpretation));
            
            this.addCardOfDayInterpretation(interpretation);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –¥–Ω—è:', error);
            this.ui.showError('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏: ' + (error.response?.data?.error || error.message));
        }
    }

    addCardOfDayInterpretation(interpretation) {
        // –†–µ–Ω–¥–µ—Ä–∏–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ Markdown
        const interpretationHtml = interpretation.ai_response 
            ? marked.parse(interpretation.ai_response)
            : '<p class="text-muted">–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</p>';
        
        // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤—É—é —á–∞—Å—Ç—å –∏ –∑–∞–º–µ–Ω—è–µ–º –µ—ë –Ω–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
        const rightSection = document.querySelector('.card-of-day-right');
        if (rightSection) {
            rightSection.innerHTML = `
                <div class="interpretation-section">
                    <h4>üìñ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</h4>
                    <div class="markdown-content">
                        ${interpretationHtml}
                    </div>
                </div>
            `;
        }
    }
}

// –î–µ–ª–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
window.app = null;