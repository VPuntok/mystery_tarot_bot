import { ApiService } from './services/api.js';
import { UI } from './ui.js';

export class TarotApp {
    constructor() {
        this.api = new ApiService();
        this.ui = new UI();
        this.currentUser = null;
        this.currentProject = null;
    }

    async init() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
            let tgUser = window.Telegram.WebApp.initDataUnsafe?.user;
            
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (–ª–æ–∫–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ), –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (!tgUser) {
                console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
                tgUser = {
                    id: 123456789,
                    username: 'test_user',
                    first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
                    last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                };
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await this.initializeApp(tgUser);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            this.showMainMenu();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.ui.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ' + error.message);
        }
    }

    async initializeApp(tgUser) {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã
        const projects = await this.api.getProjects();
        if (projects.length === 0) {
            throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤');
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        this.currentProject = this.selectProject(projects);
        
        console.log(`–í—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç: ${this.currentProject.name} (ID: ${this.currentProject.id})`);
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.currentUser = await this.api.getOrCreateUser({
            telegram_user_id: tgUser.id,
            username: tgUser.username,
            project: this.currentProject.id
        });
    }

    selectProject(projects) {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const urlParams = new URLSearchParams(window.location.search);
        const projectId = urlParams.get('project_id');
        const projectName = urlParams.get('project_name');
        
        // 2. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω project_id –≤ URL
        if (projectId) {
            const project = projects.find(p => p.id == projectId);
            if (project) {
                console.log(`–ü—Ä–æ–µ–∫—Ç –≤—ã–±—Ä–∞–Ω –ø–æ ID –∏–∑ URL: ${project.name}`);
                return project;
            } else {
                console.warn(`–ü—Ä–æ–µ–∫—Ç —Å ID ${projectId} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
            }
        }
        
        // 3. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω project_name –≤ URL
        if (projectName) {
            const project = projects.find(p => p.name.toLowerCase().includes(projectName.toLowerCase()));
            if (project) {
                console.log(`–ü—Ä–æ–µ–∫—Ç –≤—ã–±—Ä–∞–Ω –ø–æ –∏–º–µ–Ω–∏ –∏–∑ URL: ${project.name}`);
                return project;
            } else {
                console.warn(`–ü—Ä–æ–µ–∫—Ç —Å –∏–º–µ–Ω–µ–º "${projectName}" –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
            }
        }
        
        // 4. Fallback: –∏—â–µ–º –ø—Ä–æ–µ–∫—Ç "Mystic Tarot Bot"
        const mysticProject = projects.find(p => p.name.includes('Mystic Tarot Bot'));
        if (mysticProject) {
            console.log(`–ü—Ä–æ–µ–∫—Ç –≤—ã–±—Ä–∞–Ω –ø–æ –∏–º–µ–Ω–∏ "Mystic Tarot Bot": ${mysticProject.name}`);
            return mysticProject;
        }
        
        // 5. –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
        const activeProject = projects.find(p => p.status === 'active');
        if (activeProject) {
            console.log(`–ü—Ä–æ–µ–∫—Ç –≤—ã–±—Ä–∞–Ω –∫–∞–∫ –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π: ${activeProject.name}`);
            return activeProject;
        }
        
        // 6. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
        console.log(`–ü—Ä–æ–µ–∫—Ç –≤—ã–±—Ä–∞–Ω –∫–∞–∫ –ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ: ${projects[0].name}`);
        return projects[0];
    }

    showMainMenu() {
        const content = `
            <div class="balance">
                üí∞ –ë–∞–ª–∞–Ω—Å: ${this.currentUser.balance} —Ä–∞—Å–∫–ª–∞–¥–æ–≤
            </div>
            
            <div class="card">
                <small style="color: var(--tg-theme-hint-color, #6c757d); margin-bottom: 16px; display: block;">
                    –ü—Ä–æ–µ–∫—Ç: ${this.currentProject.name} (ID: ${this.currentProject.id})
                </small>
                
                <button class="button" onclick="app.showSpreads()">
                    üîÆ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                </button>
                
                <button class="button" onclick="app.showPackages()">
                    üì¶ –ö—É–ø–∏—Ç—å –ø–∞–∫–µ—Ç
                </button>
                
                <button class="button" onclick="app.showHistory()">
                    üìö –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤
                </button>
            </div>
        `;
        
        this.ui.updateContent(content);
    }

    async showSpreads() {
        try {
            this.ui.showLoading('–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–∫–ª–∞–¥–æ–≤...');
            
            const spreads = await this.api.getSpreads(this.currentProject.id);
            
            if (spreads.length === 0) {
                this.ui.showError('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–≤');
                return;
            }

            const spreadsHtml = spreads.map(spread => `
                <div class="spread-card" onclick="app.selectSpread(${spread.id})">
                    <h3>${spread.name}</h3>
                    <p>${spread.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}</p>
                    <small>–ö–∞—Ä—Ç –≤ —Ä–∞—Å–∫–ª–∞–¥–µ: ${spread.num_cards}</small>
                </div>
            `).join('');

            const content = `
                <div class="card">
                    <h2>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–∫–ª–∞–¥</h2>
                    ${spreadsHtml}
                </div>
                
                <button class="button" onclick="app.showMainMenu()">
                    ‚Üê –ù–∞–∑–∞–¥
                </button>
            `;
            
            this.ui.updateContent(content);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤:', error);
            this.ui.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤');
        }
    }

    async selectSpread(spreadId) {
        try {
            this.ui.showLoading('–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏...');
            
            // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é
            const interpretation = await this.api.createInterpretation({
                user: this.currentUser.id,
                spread: spreadId,
                cards: [] // –ö–∞—Ä—Ç—ã –±—É–¥—É—Ç –≤—ã–±—Ä–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.currentUser.balance -= 1;
            
            this.showInterpretationResult(interpretation);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏:', error);
            this.ui.showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏');
        }
    }

    showInterpretationResult(interpretation) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö, –∏–Ω–∞—á–µ fallback –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ
        const cardsHtml = (interpretation.cards_names || []).map((cardName, idx) => {
            const imgUrl = interpretation.cards_images && interpretation.cards_images[idx];
            return `
                <div class="card-item">
                    ${imgUrl ? `<img src="${imgUrl}" alt="${cardName}" class="card-image" style="max-width:120px;max-height:200px;display:block;margin:0 auto 8px;"/>` : ''}
                    <div>${cardName}</div>
                </div>
            `;
        }).join('');

        const content = `
            <div class="interpretation-result">
                <h2>üîÆ –í–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ</h2>
                
                <h3>–†–∞—Å–∫–ª–∞–¥: ${interpretation.spread_name}</h3>
                
                <div class="cards-list">
                    ${cardsHtml}
                </div>
                
                <h3>–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:</h3>
                <p>${interpretation.ai_response}</p>
                
                <div class="balance">
                    üí∞ –û—Å—Ç–∞–ª–æ—Å—å —Ä–∞—Å–∫–ª–∞–¥–æ–≤: ${this.currentUser.balance}
                </div>
            </div>
            
            <button class="button" onclick="app.showMainMenu()">
                ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é
            </button>
        `;
        
        this.ui.updateContent(content);
    }

    async showPackages() {
        try {
            this.ui.showLoading('–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞–∫–µ—Ç–æ–≤...');
            
            const packages = await this.api.getPackages(this.currentProject.id);
            
            if (packages.length === 0) {
                this.ui.showError('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤');
                return;
            }

            const packagesHtml = packages.map(pkg => `
                <div class="package-item">
                    <h3>${pkg.name}</h3>
                    <div class="package-price">${pkg.price}‚ÇΩ</div>
                    <div class="package-description">
                        ${pkg.package_type === 'one_time' 
                            ? `${pkg.num_readings} —Ä–∞—Å–∫–ª–∞–¥–æ–≤`
                            : `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ${pkg.subscription_days} –¥–Ω–µ–π`
                        }
                    </div>
                    <button class="button" onclick="app.buyPackage(${pkg.id})">
                        –ö—É–ø–∏—Ç—å
                    </button>
                </div>
            `).join('');

            const content = `
                <div class="card">
                    <h2>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã</h2>
                    ${packagesHtml}
                </div>
                
                <button class="button" onclick="app.showMainMenu()">
                    ‚Üê –ù–∞–∑–∞–¥
                </button>
            `;
            
            this.ui.updateContent(content);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–∫–µ—Ç–æ–≤:', error);
            this.ui.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞–∫–µ—Ç–æ–≤');
        }
    }

    async buyPackage(packageId) {
        try {
            this.ui.showLoading('–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...');
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º PIN-–∫–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const pinCode = prompt('–í–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ (8712):');
            
            if (!pinCode) {
                this.ui.showError('PIN-–∫–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω');
                return;
            }
            
            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
            const response = await this.api.createTestPayment({
                user: this.currentUser.id,
                project: this.currentProject.id,
                package: packageId,
                pin_code: pinCode
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.currentUser.balance = response.new_balance;
            if (response.subscription_end) {
                this.currentUser.subscription_end = response.subscription_end;
            }
            
            this.ui.showSuccess(`–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${response.new_balance} —Ä–∞—Å–∫–ª–∞–¥–æ–≤`);
            
            setTimeout(() => {
                this.showMainMenu();
            }, 2000);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
            this.ui.showError('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ' + (error.response?.data?.error || error.message));
        }
    }

    async showHistory() {
        try {
            this.ui.showLoading('–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...');
            
            const interpretations = await this.api.getInterpretations(this.currentUser.id);
            
            if (interpretations.length === 0) {
                this.ui.showError('–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –ø—É—Å—Ç–∞');
                return;
            }

            const historyHtml = interpretations.map(interpretation => {
                const cardsHtml = (interpretation.cards_names || []).map((cardName, idx) => {
                    const imgUrl = interpretation.cards_images && interpretation.cards_images[idx];
                    return `
                        <div class="card-item">
                            ${imgUrl ? `<img src="${imgUrl}" alt="${cardName}" class="card-image" style="max-width:80px;max-height:120px;display:block;margin:0 auto 4px;"/>` : ''}
                            <div>${cardName}</div>
                        </div>
                    `;
                }).join('');
                return `
                    <div class="history-item">
                        <div class="history-date">
                            ${new Date(interpretation.created_at).toLocaleDateString('ru-RU')}
                        </div>
                        <strong>${interpretation.spread_name}</strong>
                        <div class="cards-list">
                            ${cardsHtml}
                        </div>
                    </div>
                `;
            }).join('');

            const content = `
                <div class="card">
                    <h2>–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤</h2>
                    ${historyHtml}
                </div>
                
                <button class="button" onclick="app.showMainMenu()">
                    ‚Üê –ù–∞–∑–∞–¥
                </button>
            `;
            
            this.ui.updateContent(content);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
            this.ui.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏');
        }
    }
}

// –î–µ–ª–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
window.app = null; 